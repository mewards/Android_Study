package com.mewards.hw1;

import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.*;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements View.OnClickListener,
		View.OnTouchListener {

	float x;
	float y;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		Button msgBtn = (Button) findViewById(R.id.messageBtn);
		Button canvasBtn = (Button) findViewById(R.id.canvasBtn);
		msgBtn.setOnClickListener(this);
		canvasBtn.setOnClickListener(this);

	}

	@Override
	public void onClick(View v) {
		LinearLayout frame;
		final LinearLayout menu = (LinearLayout) findViewById(R.id.menu);
		final LinearLayout content = (LinearLayout) findViewById(R.id.content);
		switch (v.getId()) {
		case R.id.messageBtn:
			frame = (LinearLayout) View.inflate(MainActivity.this,
					R.layout.message, null);
			content.removeAllViews();
			menu.removeAllViews();
			menu.addView(frame);

			Button enterBtn = (Button) findViewById(R.id.enterBtn);
			enterBtn.setOnClickListener(new View.OnClickListener() {

				@Override
				public void onClick(View v) {
					EditText input = (EditText) findViewById(R.id.inputText);
					final String query = input.getText().toString();
					TextView userInput = new TextView(getApplicationContext());
					userInput.setText(query);
					userInput.setTextColor(Color.BLACK);
					userInput.setTextSize(30);
					userInput.setOnClickListener(new View.OnClickListener() {

						@Override
						public void onClick(View v) {
							Toast toast = Toast.makeText(MainActivity.this,
									query, Toast.LENGTH_SHORT);
							toast.show();
						}
					});
					content.addView(userInput);

					// TODO Auto-generated method stub

				}
			});
			break;

		case R.id.canvasBtn:
			frame = (LinearLayout) View.inflate(MainActivity.this,
					R.layout.canvas, null);
			LinearLayout sketch = (LinearLayout) View.inflate(
					MainActivity.this, R.layout.sketch, null);
			menu.removeAllViews();
			content.removeAllViews();
			content.addView(sketch);
			menu.addView(frame);
			content.setOnTouchListener(MainActivity.this);
			Paint paint = new Paint();
			paint.setAntiAlias(true);
			paint.setColor(Color.BLACK);
			paint.setStyle(Paint.Style.STROKE);
			paint.setStrokeJoin(Paint.Join.ROUND);
			paint.setStrokeWidth(5f);
			Path path = new Path();

			break;
		}
	}

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		if (event.getAction() != MotionEvent.ACTION_UP) {
			x = event.getX();
			y = event.getY();
			return true;
		} else
			return false;
	}

}

class Panel extends SurfaceView implements SurfaceHolder.Callback {

	private Bitmap mBitmap;
	private ViewThread mThread;

	private int mX;
	private int mY;

	public Panel(Context context) {
		super(context);
		mBitmap = BitmapFactory.decodeResource(getResources(),
				R.drawable.ic_launcher);
		getHolder().addCallback(this);
		mThread = new ViewThread(this);
	}

	public void doDraw(Canvas canvas) {
		canvas.drawColor(Color.BLUE);
		Paint paint = new Paint();
		canvas.drawLine(33, 0, 33, 100, paint);
		paint.setColor(Color.RED);
		paint.setStrokeWidth(10);
		canvas.drawLine(56, 0, 56, 100, paint);
		paint.setColor(Color.GREEN);
		paint.setStrokeWidth(25);
		for (int y = 30, alpha = 255; alpha > 2; alpha >>= 1, y += 10) {
			paint.setAlpha(alpha);

			canvas.drawLine(0, y, 100, y, paint);
		}

		canvas.drawBitmap(mBitmap, mX, mY, null);
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		if (!mThread.isAlive()) {
			mThread = new ViewThread(this);
			mThread.setRunning(true);
			mThread.start();
		}
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		if (mThread.isAlive()) {
			mThread.setRunning(false);
		}
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		mX = (int) event.getX() - mBitmap.getWidth() / 2;
		mY = (int) event.getY() - mBitmap.getHeight() / 2;
		return super.onTouchEvent(event);
	}
}

// ///////
class ViewThread extends Thread {
	private Panel mPanel;
	private SurfaceHolder mHolder;
	private boolean mRun = false;

	public ViewThread(Panel panel) {
		mPanel = panel;
		mHolder = mPanel.getHolder();
	}

	public void setRunning(boolean run) {
		mRun = run;
	}

	@Override
	public void run() {
		Canvas canvas = null;
		while (mRun) {
			canvas = mHolder.lockCanvas();
			if (canvas != null) {
				mPanel.doDraw(canvas);
				mHolder.unlockCanvasAndPost(canvas);
			}
		}
	}
}